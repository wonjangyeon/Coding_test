- 생각의 흐름
1. want 벡터와 numbers 벡터는 연관 관계이기 때문에 map 을 사용하여 묶어준다
2. discount 벡터를 앞에서 부터 10개씩 세트로 확인해야 하기 때문에 슬라이딩 윈도우 개념이 필요하겠다
3. map을 활용해서 discount_map에 10개씩 담은 뒤 want_map과 비교하자(같으면 answer++하면서 for문 돌리자)
4. 비교 방법 : want_map에 필요한 물품이 있어야 한다 && 있다면, 필요한 개수만큼 있어야 한다.


#include <string>
#include <vector>
#include <unordered_map>

using namespace std;
unordered_map<string, int> want_map;

bool check(unordered_map<string, int> discount_map){
    for(auto n : want_map){
        // 사려는 품목이 할인 품목에 없다면 false
        if(discount_map.find(n.first) == discount_map.end()){
            return false;
        }
        // 필요한 수량만큼 없다면 false
        else if(discount_map[n.first] != n.second){
            return false;
        }
    }
    return true;
}
    
int solution(vector<string> want, vector<int> number, vector<string> discount) {
    int answer = 0;
    
    for(int i=0 ; i<want.size() ; i++){
        want_map[want[i]] = number[i];
    }
    
    
    for(int i=0 ; i<=discount.size()-10 ; i++){
        unordered_map<string, int> discount_map;
        for(int j=i ; j<i+10 ; j++){
            discount_map[discount[j]]++;
        }
        if(check(discount_map)) {answer++;}
    }
    return answer;
}
